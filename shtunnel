#!/usr/bin/perl

use IO::Handle;
use Socket;
use POSIX;
#use strict;

$magic = "\xF0";
#$magic = "%";
$magicInit = ($magic x 6).'ShellTunnelInit';
%channels = ();
$server = '';
$client = 1;
#$shellCmd = 'sh -i';
$shellCmd = 'ssh -t -t';
$initialized = 0;
$sockaddr = 'S n a4 x8';
$debug = 0;

sub debug
{
	return unless($debug);

	my ($msg) = @_;
	$log = 'STDOUT' if ($client);
	if (!$log) {
		$log = 'LOG';
		open($log,'>>log.txt') or die ('Error opening log file');
		$log->autoflush(1);
	}
	print $log $msg;
}

sub mangle
{
	my $in = shift;
	my ($nin,$nout) = (0,0);
	my $max = length($in) * 8;
	my $out = '';
	while ($nin < $max) {
		vec($out, $nout, 1) = vec($in, $nin, 1);
		++$nin;
		++$nout;
		if (($nout & 7) == 7) {
			vec($out, $nout++, 1) = 1;
		}
	}
	vec($out, $nout | 7, 1) = 1 if ($nout & 7);
	return $out;
}

sub demangle
{
	my $in = shift;
	my ($nin,$nout) = (0,0);
	my $max = length($in) * 8;
	my $out = '';
	while ($nin < $max) {
		vec($out, $nout, 1) = vec($in, $nin, 1);
		++$nin;
		++$nout;
		++$nin if (($nin & 7) == 7);
	}
	$out = substr($out,0,-1) if ($nout & 7);
	return $out;
}

sub commandPack($$$)
{
	my ($type, $ch, $port) = @_;
	return $magic.' '.mangle(pack('CCn', $type, $ch, $port));
}

sub mywrite
{
	my ($fh, $data) = @_;
	my $n = length($data);
	my $res;
	while($n > 0) {
		do {
			$res = syswrite($fh, $data);
		} until(defined($res) || $! != EINTR);
		last if ($res <= 0 || $res >= $n);
		$data = substr($data, $res);
		$n = length($data);
		sleep 1;
	}
}

sub getChannel
{
	my ($type, $n) = @_;
	if (!$n) {
		foreach my $i (1..254) {
			if (!$channels{$i}) {
				$n = $i; last;
			}
		}
	}
	return undef if (!$n);

	die('Invalid channel number') if ($n < 1 || $n > 254);

	my $ch = { number => $n, fh => "CHANNEL$n", type => $type };
	$channels{$n} = $ch;
	return $ch;
}

sub deleteChannel
{
	my $n = shift;
	my $ch = $channels{$n};
	close($ch->{fh}) if (fileno($ch->{fh}));
	delete $channels{$n};
}

# initialize all channels
sub initChannels
{
	foreach my $ch (values %channels) {
		if ($ch->{type} eq 'listen') {
			my $fh = $ch->{fh};
			socket($fh, &PF_INET, &SOCK_STREAM, 0) || die "socket: $!";
			my $this = pack($sockaddr, &AF_INET, $ch->{'local'}, "\0\0\0\0");
			bind($fh, $this) || die "bind: $!";
			listen($fh, 5) || die "listen: $!";
		}
	}
}

sub sendInitChannels
{
	foreach my $ch (values %channels) {
		if ($ch->{type} eq 'connect') {
			# TODO write all
			debug("send listen request for port".$ch->{remote});
			mywrite(WRITE, commandPack(51, $ch->{number}, $ch->{remote}));
		}
	}
}

sub channelsSelect
{
	foreach my $ch (values %channels) {
		if ($ch->{type} eq 'listen' && !$ch->{blocked}) {
			vec($read, fileno($ch->{fh}), 1) = 1;
		} elsif ($ch->{type} eq 'connected' && $ch->{connected}) {
			vec($read, fileno($ch->{fh}), 1) = 1;
			vec($error, fileno($ch->{fh}), 1) = 1;
		}
	}

	select($read, $write, $error, undef);

	foreach my $ch (values %channels) {
		my $fh = $ch->{fh};
		my $f = fileno($fh);
		if ($ch->{type} eq 'listen' && !$ch->{blocked}) {
			if (vec($read, $f, 1)) {
				if ($client) {
					my $och = getChannel('connected') or die('No more channels');
					my $ofh = $och->{fh};
					accept($ofh,$fh) || die "accept $!";
					if ($initialized) {
						mywrite(WRITE, commandPack(52, $och->{number}, $ch->{remote}));
					} else {
						deleteChannel($och->{number});
					}
				} else {
					my $ofh = "ACCEPT".$ch->{number};
					accept($ofh,$fh) || die "accept $!";
					$ch->{blocked} = 1;
					$ch->{accepted} = $ofh;
					mywrite(STDOUT, commandPack(52, $ch->{number}, 0));
				}
			}
		} elsif ($ch->{type} eq 'connected' && $ch->{connected}) {
			if (vec($read, $f, 1)) {
				my $r = '';
				my $res;
				do { 
					$res = sysread($fh, $r, 64);
				} until(defined($res) || $! != EINTR);
				if (!length($r)) {
					# connection closed, send close command
					deleteChannel($ch->{number});
					$r = commandPack(54, $ch->{number}, 0);
				} else {
					$r = mangle(pack('C',$ch->{number}).$r);
					$r = pack('aC',$magic, 32+length($r)).$r;
				}
				if ($client) {
					mywrite(WRITE, $r);
				} else {
					mywrite(STDOUT, $r);
				}
			}
		}
	}
}

sub addLocal($)
{
	die('invalid local syntax') if (shift !~ /^(\d+)::(\d+)$/);
	my ($local, $remote) = ($1, $2);
	my $ch = getChannel('listen') or die('no more channels');
	$ch->{'local'} = $local;
	$ch->{'remote'} = $remote;
}

sub addRemote($)
{
	die('invalid remote syntax') if (shift !~ /^(\d+):([^:]*):(\d+)$/);
	my ($remote, $ip, $local) = ($1, $2, $3);
	$ip = '127.0.0.1' unless ($ip);
	die('invalid ip format') if ($ip !~ /^\d+\.\d+\.\d+\.\d+$/);
	$ip = pack('C4',split(/\./,$ip));
	my $ch = getChannel('connect') or die('no more channels');
	$ch->{'local'} = $local;
	$ch->{'remote'} = $remote;
	$ch->{'ip'} = $ip;
}

while ($ARGV[0]) {
	$arg = shift;
	SWITCH: {
	if ($arg eq '-L') { addLocal(shift);        last SWITCH; }
	if ($arg eq '-R') { addRemote(shift);       last SWITCH; }
	if ($arg eq '--server') { $client = 0;      last SWITCH; }
	if ($arg eq '--shell') { $shellCmd = shift; last SWITCH; }
	if ($arg eq '--debug') { $debug = 1;        last SWITCH; }
	$server = $arg;
	}
}

if ($client) {
	die("server option needed") if (!$server);
	$endPoint = 'client';
} else {
	$server = '';
	mywrite(STDOUT, $magicInit);
	$initialized = 1;
	$endPoint = 'server';
}

initChannels;

use IPC::Open2;
$pid = open2(*READ, *WRITE, "$shellCmd $server" );
WRITE->autoflush(1);

$| = 1;

# disable tty cache line
$term = POSIX::Termios->new;
$term->getattr(fileno(STDIN));

sub echoOff 
{
	$olterm = $term->getlflag();
	$octerm = $term->getcc(VTIME);
	$term->setlflag($olterm & ~(ECHO|ECHOK|ICANON));
	$term->setcc(VTIME, 0);
	$term->setattr(fileno(STDIN), TCSANOW);
}

sub echoOn
{
	$term->setlflag($olterm);
	$term->setcc(VTIME, $octerm);
	$term->setattr(fileno(STDIN), TCSANOW);
}

sub gotoRaw
{
	my $tmp = $term->getiflag();
	$term->setiflag($tmp & ~(IGNBRK|BRKINT|PARMRK|ISTRIP|INLCR|IGNCR|ICRNL|IXON));
	$tmp = $term->getoflag();
	$term->setoflag($tmp & ~OPOST);
	$tmp = $term->getlflag();
	$term->setlflag($tmp & ~(ECHO|ECHONL|ICANON|ISIG|IEXTEN));
	$tmp = $term->getcflag();
	$term->setcflag($tmp & ~(CSIZE|PARENB) | CS8);
}

echoOff;
gotoRaw if ($client);

sub fhbits {
	my(@fhlist) = split(' ',shift);
	my($bits);
	for (@fhlist) {
		vec($bits,fileno($_),1) = 1;
	}
	$bits;
}

$control = '';

sub parseControl
{
	my ($m, $nch) = unpack('aC', $control);
	$control = demangle(substr($control,2));
	if ($nch != 32) {
		($nch) = unpack('C',$control);
		my $ch = $channels{$nch};
		mywrite($ch->{fh}, substr($control,1));
		return;
	}

	my ($type, $och, $port) = unpack('CCn', $control);

	# command
	if ($type == 51) {
		# listen (only server)
		# add channel, open listening socket
		my $ch = getChannel('listen',$och) or die('No more channels');
		debug("listen request channel $och port $port ");
		$ch->{'local'} = $port;
		my $fh = $ch->{fh};
		socket($fh, &PF_INET, &SOCK_STREAM, 0) || die "socket: $!";
		my $this = pack($sockaddr, &AF_INET, $ch->{'local'}, "\0\0\0\0");
		bind($fh, $this) || die "bind: $!";
		listen($fh, 5) || die "listen: $!";
	} elsif ($type == 52) {
		# connect
		debug("\nconnect command channel $och port $port\n");
		if ($client) {
			$nch = getChannel('connected') or die('No more channels');
			$port = $channels{$och}->{'local'};
			socket($nch->{fh}, &PF_INET, &SOCK_STREAM, 0) || die "socket: $!";
			if (connect($nch->{fh}, pack($sockaddr, &AF_INET, $port, $channels{$och}->{ip}))) {
				$nch->{connected} = 1;
				debug("\nrichiesta connessione accettata\n");
				my $res = mywrite(WRITE, commandPack(53, $och, $nch->{number}));
				debug("res=$res");
			} else {
				debug("\nrichiesta connessione rifiutata\n");
				deleteChannel($nch->{number});
				mywrite(WRITE, commandPack(53, $och, 0));
			}
		} else {
			my $nch = getChannel('connected',$och) or die('No more channels');
			socket($nch->{fh}, &PF_INET, &SOCK_STREAM, 0) || die "socket: $!";
			if (connect($nch->{fh}, pack($sockaddr, &AF_INET, $port, "\x7f\0\0\x01"))) {
				debug("connected to port $port");
				mywrite(STDOUT, commandPack(53, $och, $och));
				$nch->{connected} = 1;
			} else {
				debug("error connecting to port $port");
				deleteChannel($nch->{number});
				mywrite(STDOUT, commandPack(53, $och, 0));
			}
		}
	} elsif ($type == 53) {
		# accept
		if ($client) {
			if (!$port) {
				deleteChannel($och);
			} else {
				debug('client: accepted connection');
				$channels{$och}->{connected} = 1;
			}
		} else {
			debug("accept from client");
			if (!$port) {
				# close socket
				close($channels{$och}->{accepted});
			} else {
				# init new channel
				my $ch = getChannel('connected', $port) or die('No more channels');
				# copy socket
				debug("fileno=".fileno($channels{$och}->{accepted}));
				*{$ch->{fh}} = *{$channels{$och}->{accepted}};
				undef *{$channels{$och}->{accepted}};
				debug("fileno=".fileno($ch->{fh}));
				# set connected
				$ch->{connected} = 1;
			}
			# unblock listen, accept more connections
			$channels{$och}->{blocked} = 0;
			undef $channels{$och}->{accepted};
		}
	} elsif ($type == 54) {
		# close
		# close channel and related socket
		debug("connection closed");
		deleteChannel($och);
	}
}

sub process {
	my $res = '';
	my $arg = $control.shift;
	my $controlLen;
	$control = '';
	foreach my $c (split('', $arg)) {
		debug("control=".join(',',unpack('C6',$control))."\n") if (length($control));
		if (length($control)) {
			$control .= $c;
			if (length($control) == $controlLen) {
				my ($n) = unpack('C',$c);
				# detect required length
				if ($controlLen == 2) {
					debug("\ngot control n=$n\n");
					$n -= 32;
					$n = 0 if ($n < 0);
					if ($n == 1) {
						$res .= $magic;
						$control = '';
						next;
					}
					$controlLen = ($n == 0) ? 7 : $n + 2;
					next;
				}
				debug("\nparsing control...\n");
				parseControl;
				$control = '';
			}
			next;
		}
		if ($client && $magicInitPos >= 6) {
			if ($c eq substr($magicInit,$magicInitPos,1)) {
				if (++$magicInitPos == length($magicInit)) {
					# initialize remote
					debug("\nGot initialization request\n");
					sendInitChannels;
					$initialized = 1;
				}
			} else {
				$magicInitPos = 0;
			}
		}
		if ($c eq $magic) {
			$magicInitPos = 6 if (++$magicCharCount >= 6);
			if ($initialized) {
				$controlLen = 2;
				$control = $c;
				next;
			}
		} else {
			$magicCharCount = 0;
		}
		$res .= $c;
	}
	return $res;
}

$SIG{'PIPE'} = 'IGNORE';
$SIG{'INT'} = 'IGNORE' if (!$client);

while() {
	$read = fhbits('STDIN READ');
	$write = '';
	$error = fhbits('READ WRITE');

	channelsSelect;

	die('READ') if (vec($error, fileno(READ), 1));
	die('WRITE') if (vec($error, fileno(WRITE), 1));

	$f = fileno(STDIN);
	if (vec($read,$f,1)) {
		sysread(STDIN, $l, 1000);
		die("broken pipe $endPoint") if (!length($l));
		debug("\nfrom client=".join(',',unpack('C*',$l))."\n") if (!$client);
		$l = process($l) if (!$client);
		mywrite(WRITE, $l);
	}

	$f = fileno(READ);
	if (vec($read, $f, 1)) {
		sysread(READ, $l, 1000);
		die("broken pipe $endPoint") if (!length($l));
		debug("\norig=".join(',',unpack('C*',$l))."\n");
		$l = process($l) if ($client);
		mywrite(STDOUT,$l);
	}
}
